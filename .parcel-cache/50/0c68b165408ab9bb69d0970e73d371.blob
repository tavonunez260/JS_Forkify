"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector('.pagination'));

    _defineProperty(this, "_curPage", this._data.page);

    _defineProperty(this, "_numPages", Math.ceil(this._data.results.length / this._data.resultsPerPage));
  }

  _generateMarkup() {
    //More than 1 page
    if (this._curPage === 1 && this._numPages > 1) {
      this._generateNextButton();
    } //Last page


    if (curPage === numPages && numPages > 1) {
      this._generatePrevButton();
    } //Other page


    if (curPage < numPages) {
      this._generatePrevButton() + this._generateNextButton();
    } //Only one page


    return '';
  }

  _generatePrevButton() {
    return `
        <button class="btn--inline pagination__btn--prev">
            <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-left"></use>
            </svg>
            <span>Page ${this._curPage - 1}</span>
        </button>`;
  }

  _generateNextButton() {
    return `
        <button class="btn--inline pagination__btn--next">
            <span>${this._curPage + 1}</span>
            <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-right"></use>
            </svg>
        </button>`;
  }

}

var _default = new PaginationView();

exports.default = _default;